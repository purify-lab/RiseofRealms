/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using System.Linq;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class PlayerStakeTable : MUDTable
    {
        public class PlayerStakeTableUpdate : RecordUpdate
        {
            public System.Numerics.BigInteger? TokenB;
            public System.Numerics.BigInteger? PreviousTokenB;
            public System.Numerics.BigInteger? TokenC;
            public System.Numerics.BigInteger? PreviousTokenC;
        }

        public readonly static string ID = "PlayerStake";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public System.Numerics.BigInteger? TokenB;
        public System.Numerics.BigInteger? TokenC;

        public override Type TableType()
        {
            return typeof(PlayerStakeTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(PlayerStakeTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            PlayerStakeTable other = (PlayerStakeTable)obj;

            if (other == null)
            {
                return false;
            }
            if (TokenB != other.TokenB)
            {
                return false;
            }
            if (TokenC != other.TokenC)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            TokenB = (System.Numerics.BigInteger)functionParameters[0];

            TokenC = (System.Numerics.BigInteger)functionParameters[1];
        }

        public static IObservable<RecordUpdate> GetPlayerStakeTableUpdates()
        {
            PlayerStakeTable mudTable = new PlayerStakeTable();

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override void PropertyToTable(Property property)
        {
            TokenB = (System.Numerics.BigInteger)property["tokenB"];
            TokenC = (System.Numerics.BigInteger)property["tokenC"];
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentRecordValue as Property;
            var previousValue = recordUpdate.PreviousRecordValue as Property;
            System.Numerics.BigInteger? currentTokenBTyped = null;
            System.Numerics.BigInteger? previousTokenBTyped = null;

            if (currentValue != null && currentValue.ContainsKey("tokenb"))
            {
                currentTokenBTyped = (System.Numerics.BigInteger)currentValue["tokenb"];
            }

            if (previousValue != null && previousValue.ContainsKey("tokenb"))
            {
                previousTokenBTyped = (System.Numerics.BigInteger)previousValue["tokenb"];
            }
            System.Numerics.BigInteger? currentTokenCTyped = null;
            System.Numerics.BigInteger? previousTokenCTyped = null;

            if (currentValue != null && currentValue.ContainsKey("tokenc"))
            {
                currentTokenCTyped = (System.Numerics.BigInteger)currentValue["tokenc"];
            }

            if (previousValue != null && previousValue.ContainsKey("tokenc"))
            {
                previousTokenCTyped = (System.Numerics.BigInteger)previousValue["tokenc"];
            }

            return new PlayerStakeTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentRecordValue = recordUpdate.CurrentRecordValue,
                PreviousRecordValue = recordUpdate.PreviousRecordValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                TokenB = currentTokenBTyped,
                PreviousTokenB = previousTokenBTyped,
                TokenC = currentTokenCTyped,
                PreviousTokenC = previousTokenCTyped,
            };
        }
    }
}
