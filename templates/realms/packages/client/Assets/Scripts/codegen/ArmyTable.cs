/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using System.Linq;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class ArmyTable : MUDTable
    {
        public class ArmyTableUpdate : RecordUpdate { }

        public readonly static string ID = "Army";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public override Type TableType()
        {
            return typeof(ArmyTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(ArmyTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            ArmyTable other = (ArmyTable)obj;

            if (other == null)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters) { }

        public static IObservable<RecordUpdate> GetArmyTableUpdates()
        {
            ArmyTable mudTable = new ArmyTable();

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override void PropertyToTable(Property property) { }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentRecordValue as Property;
            var previousValue = recordUpdate.PreviousRecordValue as Property;

            return new ArmyTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentRecordValue = recordUpdate.CurrentRecordValue,
                PreviousRecordValue = recordUpdate.PreviousRecordValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
            };
        }
    }
}
