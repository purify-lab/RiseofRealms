/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using System.Linq;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class GlobalStakeTable : MUDTable
    {
        public class GlobalStakeTableUpdate : RecordUpdate
        {
            public System.Numerics.BigInteger? StakeTokenB;
            public System.Numerics.BigInteger? PreviousStakeTokenB;
            public System.Numerics.BigInteger? StakeTokenC;
            public System.Numerics.BigInteger? PreviousStakeTokenC;
            public System.Numerics.BigInteger? LastStakeTime;
            public System.Numerics.BigInteger? PreviousLastStakeTime;
            public System.Numerics.BigInteger? ValueB;
            public System.Numerics.BigInteger? PreviousValueB;
            public System.Numerics.BigInteger? ValueC;
            public System.Numerics.BigInteger? PreviousValueC;
        }

        public readonly static string ID = "GlobalStake";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public System.Numerics.BigInteger? StakeTokenB;
        public System.Numerics.BigInteger? StakeTokenC;
        public System.Numerics.BigInteger? LastStakeTime;
        public System.Numerics.BigInteger? ValueB;
        public System.Numerics.BigInteger? ValueC;

        public override Type TableType()
        {
            return typeof(GlobalStakeTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(GlobalStakeTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            GlobalStakeTable other = (GlobalStakeTable)obj;

            if (other == null)
            {
                return false;
            }
            if (StakeTokenB != other.StakeTokenB)
            {
                return false;
            }
            if (StakeTokenC != other.StakeTokenC)
            {
                return false;
            }
            if (LastStakeTime != other.LastStakeTime)
            {
                return false;
            }
            if (ValueB != other.ValueB)
            {
                return false;
            }
            if (ValueC != other.ValueC)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            StakeTokenB = (System.Numerics.BigInteger)functionParameters[0];

            StakeTokenC = (System.Numerics.BigInteger)functionParameters[1];

            LastStakeTime = (System.Numerics.BigInteger)functionParameters[2];

            ValueB = (System.Numerics.BigInteger)functionParameters[3];

            ValueC = (System.Numerics.BigInteger)functionParameters[4];
        }

        public static IObservable<RecordUpdate> GetGlobalStakeTableUpdates()
        {
            GlobalStakeTable mudTable = new GlobalStakeTable();

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override void PropertyToTable(Property property)
        {
            StakeTokenB = (System.Numerics.BigInteger)property["stakeTokenB"];
            StakeTokenC = (System.Numerics.BigInteger)property["stakeTokenC"];
            LastStakeTime = (System.Numerics.BigInteger)property["lastStakeTime"];
            ValueB = (System.Numerics.BigInteger)property["valueB"];
            ValueC = (System.Numerics.BigInteger)property["valueC"];
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentRecordValue as Property;
            var previousValue = recordUpdate.PreviousRecordValue as Property;
            System.Numerics.BigInteger? currentStakeTokenBTyped = null;
            System.Numerics.BigInteger? previousStakeTokenBTyped = null;

            if (currentValue != null && currentValue.ContainsKey("staketokenb"))
            {
                currentStakeTokenBTyped = (System.Numerics.BigInteger)currentValue["staketokenb"];
            }

            if (previousValue != null && previousValue.ContainsKey("staketokenb"))
            {
                previousStakeTokenBTyped = (System.Numerics.BigInteger)previousValue["staketokenb"];
            }
            System.Numerics.BigInteger? currentStakeTokenCTyped = null;
            System.Numerics.BigInteger? previousStakeTokenCTyped = null;

            if (currentValue != null && currentValue.ContainsKey("staketokenc"))
            {
                currentStakeTokenCTyped = (System.Numerics.BigInteger)currentValue["staketokenc"];
            }

            if (previousValue != null && previousValue.ContainsKey("staketokenc"))
            {
                previousStakeTokenCTyped = (System.Numerics.BigInteger)previousValue["staketokenc"];
            }
            System.Numerics.BigInteger? currentLastStakeTimeTyped = null;
            System.Numerics.BigInteger? previousLastStakeTimeTyped = null;

            if (currentValue != null && currentValue.ContainsKey("laststaketime"))
            {
                currentLastStakeTimeTyped = (System.Numerics.BigInteger)
                    currentValue["laststaketime"];
            }

            if (previousValue != null && previousValue.ContainsKey("laststaketime"))
            {
                previousLastStakeTimeTyped = (System.Numerics.BigInteger)
                    previousValue["laststaketime"];
            }
            System.Numerics.BigInteger? currentValueBTyped = null;
            System.Numerics.BigInteger? previousValueBTyped = null;

            if (currentValue != null && currentValue.ContainsKey("valueb"))
            {
                currentValueBTyped = (System.Numerics.BigInteger)currentValue["valueb"];
            }

            if (previousValue != null && previousValue.ContainsKey("valueb"))
            {
                previousValueBTyped = (System.Numerics.BigInteger)previousValue["valueb"];
            }
            System.Numerics.BigInteger? currentValueCTyped = null;
            System.Numerics.BigInteger? previousValueCTyped = null;

            if (currentValue != null && currentValue.ContainsKey("valuec"))
            {
                currentValueCTyped = (System.Numerics.BigInteger)currentValue["valuec"];
            }

            if (previousValue != null && previousValue.ContainsKey("valuec"))
            {
                previousValueCTyped = (System.Numerics.BigInteger)previousValue["valuec"];
            }

            return new GlobalStakeTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentRecordValue = recordUpdate.CurrentRecordValue,
                PreviousRecordValue = recordUpdate.PreviousRecordValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                StakeTokenB = currentStakeTokenBTyped,
                PreviousStakeTokenB = previousStakeTokenBTyped,
                StakeTokenC = currentStakeTokenCTyped,
                PreviousStakeTokenC = previousStakeTokenCTyped,
                LastStakeTime = currentLastStakeTimeTyped,
                PreviousLastStakeTime = previousLastStakeTimeTyped,
                ValueB = currentValueBTyped,
                PreviousValueB = previousValueBTyped,
                ValueC = currentValueCTyped,
                PreviousValueC = previousValueCTyped,
            };
        }
    }
}
