/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using System.Linq;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class GlobalStatisticsTable : MUDTable
    {
        public class GlobalStatisticsTableUpdate : RecordUpdate
        {
            public System.Numerics.BigInteger? ConsumptionTokenB;
            public System.Numerics.BigInteger? PreviousConsumptionTokenB;
            public System.Numerics.BigInteger? ConsumptionTokenC;
            public System.Numerics.BigInteger? PreviousConsumptionTokenC;
        }

        public readonly static string ID = "GlobalStatistics";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public System.Numerics.BigInteger? ConsumptionTokenB;
        public System.Numerics.BigInteger? ConsumptionTokenC;

        public override Type TableType()
        {
            return typeof(GlobalStatisticsTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(GlobalStatisticsTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            GlobalStatisticsTable other = (GlobalStatisticsTable)obj;

            if (other == null)
            {
                return false;
            }
            if (ConsumptionTokenB != other.ConsumptionTokenB)
            {
                return false;
            }
            if (ConsumptionTokenC != other.ConsumptionTokenC)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            ConsumptionTokenB = (System.Numerics.BigInteger)functionParameters[0];

            ConsumptionTokenC = (System.Numerics.BigInteger)functionParameters[1];
        }

        public static IObservable<RecordUpdate> GetGlobalStatisticsTableUpdates()
        {
            GlobalStatisticsTable mudTable = new GlobalStatisticsTable();

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override void PropertyToTable(Property property)
        {
            ConsumptionTokenB = (System.Numerics.BigInteger)property["consumptionTokenB"];
            ConsumptionTokenC = (System.Numerics.BigInteger)property["consumptionTokenC"];
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentRecordValue as Property;
            var previousValue = recordUpdate.PreviousRecordValue as Property;
            System.Numerics.BigInteger? currentConsumptionTokenBTyped = null;
            System.Numerics.BigInteger? previousConsumptionTokenBTyped = null;

            if (currentValue != null && currentValue.ContainsKey("consumptiontokenb"))
            {
                currentConsumptionTokenBTyped = (System.Numerics.BigInteger)
                    currentValue["consumptiontokenb"];
            }

            if (previousValue != null && previousValue.ContainsKey("consumptiontokenb"))
            {
                previousConsumptionTokenBTyped = (System.Numerics.BigInteger)
                    previousValue["consumptiontokenb"];
            }
            System.Numerics.BigInteger? currentConsumptionTokenCTyped = null;
            System.Numerics.BigInteger? previousConsumptionTokenCTyped = null;

            if (currentValue != null && currentValue.ContainsKey("consumptiontokenc"))
            {
                currentConsumptionTokenCTyped = (System.Numerics.BigInteger)
                    currentValue["consumptiontokenc"];
            }

            if (previousValue != null && previousValue.ContainsKey("consumptiontokenc"))
            {
                previousConsumptionTokenCTyped = (System.Numerics.BigInteger)
                    previousValue["consumptiontokenc"];
            }

            return new GlobalStatisticsTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentRecordValue = recordUpdate.CurrentRecordValue,
                PreviousRecordValue = recordUpdate.PreviousRecordValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                ConsumptionTokenB = currentConsumptionTokenBTyped,
                PreviousConsumptionTokenB = previousConsumptionTokenBTyped,
                ConsumptionTokenC = currentConsumptionTokenCTyped,
                PreviousConsumptionTokenC = previousConsumptionTokenCTyped,
            };
        }
    }
}
