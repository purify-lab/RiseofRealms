/* Autogenerated file. Manual edits will not be saved.*/

#nullable enable
using System;
using System.Linq;
using mud;
using UniRx;
using Property = System.Collections.Generic.Dictionary<string, object>;

namespace mudworld
{
    public class PlayerAirdropTable : MUDTable
    {
        public class PlayerAirdropTableUpdate : RecordUpdate
        {
            public bool? IsClaimed;
            public bool? PreviousIsClaimed;
        }

        public readonly static string ID = "PlayerAirdrop";
        public static RxTable Table
        {
            get { return NetworkManager.Instance.ds.store[ID]; }
        }

        public override string GetTableId()
        {
            return ID;
        }

        public bool? IsClaimed;

        public override Type TableType()
        {
            return typeof(PlayerAirdropTable);
        }

        public override Type TableUpdateType()
        {
            return typeof(PlayerAirdropTableUpdate);
        }

        public override bool Equals(object? obj)
        {
            PlayerAirdropTable other = (PlayerAirdropTable)obj;

            if (other == null)
            {
                return false;
            }
            if (IsClaimed != other.IsClaimed)
            {
                return false;
            }
            return true;
        }

        public override void SetValues(params object[] functionParameters)
        {
            IsClaimed = (bool)functionParameters[0];
        }

        public static IObservable<RecordUpdate> GetPlayerAirdropTableUpdates()
        {
            PlayerAirdropTable mudTable = new PlayerAirdropTable();

            return NetworkManager.Instance.sync.onUpdate
                .Where(update => update.Table.Name == ID)
                .Select(recordUpdate =>
                {
                    return mudTable.RecordUpdateToTyped(recordUpdate);
                });
        }

        public override void PropertyToTable(Property property)
        {
            IsClaimed = (bool)property["isClaimed"];
        }

        public override RecordUpdate RecordUpdateToTyped(RecordUpdate recordUpdate)
        {
            var currentValue = recordUpdate.CurrentRecordValue as Property;
            var previousValue = recordUpdate.PreviousRecordValue as Property;
            bool? currentIsClaimedTyped = null;
            bool? previousIsClaimedTyped = null;

            if (currentValue != null && currentValue.ContainsKey("isclaimed"))
            {
                currentIsClaimedTyped = (bool)currentValue["isclaimed"];
            }

            if (previousValue != null && previousValue.ContainsKey("isclaimed"))
            {
                previousIsClaimedTyped = (bool)previousValue["isclaimed"];
            }

            return new PlayerAirdropTableUpdate
            {
                Table = recordUpdate.Table,
                CurrentRecordValue = recordUpdate.CurrentRecordValue,
                PreviousRecordValue = recordUpdate.PreviousRecordValue,
                CurrentRecordKey = recordUpdate.CurrentRecordKey,
                PreviousRecordKey = recordUpdate.PreviousRecordKey,
                Type = recordUpdate.Type,
                IsClaimed = currentIsClaimedTyped,
                PreviousIsClaimed = previousIsClaimedTyped,
            };
        }
    }
}
