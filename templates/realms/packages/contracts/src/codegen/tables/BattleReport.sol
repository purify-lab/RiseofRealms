// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct BattleReportData {
  address attacker;
  address defender;
  bool win;
  bool attackOrDefence;
  uint256 lossInfantry;
}

library BattleReport {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "BattleReport", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000426174746c655265706f727400000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x004a050014140101200000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint16, uint256)
  Schema constant _keySchema = Schema.wrap(0x00220200011f0000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (address, address, bool, bool, uint256)
  Schema constant _valueSchema = Schema.wrap(0x004a0500616160601f0000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "capitalId";
    keyNames[1] = "timestamp";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "attacker";
    fieldNames[1] = "defender";
    fieldNames[2] = "win";
    fieldNames[3] = "attackOrDefence";
    fieldNames[4] = "lossInfantry";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get attacker.
   */
  function getAttacker(uint16 capitalId, uint256 timestamp) internal view returns (address attacker) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get attacker.
   */
  function _getAttacker(uint16 capitalId, uint256 timestamp) internal view returns (address attacker) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set attacker.
   */
  function setAttacker(uint16 capitalId, uint256 timestamp, address attacker) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((attacker)), _fieldLayout);
  }

  /**
   * @notice Set attacker.
   */
  function _setAttacker(uint16 capitalId, uint256 timestamp, address attacker) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((attacker)), _fieldLayout);
  }

  /**
   * @notice Get defender.
   */
  function getDefender(uint16 capitalId, uint256 timestamp) internal view returns (address defender) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get defender.
   */
  function _getDefender(uint16 capitalId, uint256 timestamp) internal view returns (address defender) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set defender.
   */
  function setDefender(uint16 capitalId, uint256 timestamp, address defender) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((defender)), _fieldLayout);
  }

  /**
   * @notice Set defender.
   */
  function _setDefender(uint16 capitalId, uint256 timestamp, address defender) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((defender)), _fieldLayout);
  }

  /**
   * @notice Get win.
   */
  function getWin(uint16 capitalId, uint256 timestamp) internal view returns (bool win) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get win.
   */
  function _getWin(uint16 capitalId, uint256 timestamp) internal view returns (bool win) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set win.
   */
  function setWin(uint16 capitalId, uint256 timestamp, bool win) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((win)), _fieldLayout);
  }

  /**
   * @notice Set win.
   */
  function _setWin(uint16 capitalId, uint256 timestamp, bool win) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((win)), _fieldLayout);
  }

  /**
   * @notice Get attackOrDefence.
   */
  function getAttackOrDefence(uint16 capitalId, uint256 timestamp) internal view returns (bool attackOrDefence) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get attackOrDefence.
   */
  function _getAttackOrDefence(uint16 capitalId, uint256 timestamp) internal view returns (bool attackOrDefence) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set attackOrDefence.
   */
  function setAttackOrDefence(uint16 capitalId, uint256 timestamp, bool attackOrDefence) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((attackOrDefence)), _fieldLayout);
  }

  /**
   * @notice Set attackOrDefence.
   */
  function _setAttackOrDefence(uint16 capitalId, uint256 timestamp, bool attackOrDefence) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((attackOrDefence)), _fieldLayout);
  }

  /**
   * @notice Get lossInfantry.
   */
  function getLossInfantry(uint16 capitalId, uint256 timestamp) internal view returns (uint256 lossInfantry) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lossInfantry.
   */
  function _getLossInfantry(uint16 capitalId, uint256 timestamp) internal view returns (uint256 lossInfantry) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lossInfantry.
   */
  function setLossInfantry(uint16 capitalId, uint256 timestamp, uint256 lossInfantry) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((lossInfantry)), _fieldLayout);
  }

  /**
   * @notice Set lossInfantry.
   */
  function _setLossInfantry(uint16 capitalId, uint256 timestamp, uint256 lossInfantry) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((lossInfantry)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(uint16 capitalId, uint256 timestamp) internal view returns (BattleReportData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint16 capitalId, uint256 timestamp) internal view returns (BattleReportData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint16 capitalId,
    uint256 timestamp,
    address attacker,
    address defender,
    bool win,
    bool attackOrDefence,
    uint256 lossInfantry
  ) internal {
    bytes memory _staticData = encodeStatic(attacker, defender, win, attackOrDefence, lossInfantry);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint16 capitalId,
    uint256 timestamp,
    address attacker,
    address defender,
    bool win,
    bool attackOrDefence,
    uint256 lossInfantry
  ) internal {
    bytes memory _staticData = encodeStatic(attacker, defender, win, attackOrDefence, lossInfantry);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint16 capitalId, uint256 timestamp, BattleReportData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.attacker,
      _table.defender,
      _table.win,
      _table.attackOrDefence,
      _table.lossInfantry
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint16 capitalId, uint256 timestamp, BattleReportData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.attacker,
      _table.defender,
      _table.win,
      _table.attackOrDefence,
      _table.lossInfantry
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (address attacker, address defender, bool win, bool attackOrDefence, uint256 lossInfantry) {
    attacker = (address(Bytes.getBytes20(_blob, 0)));

    defender = (address(Bytes.getBytes20(_blob, 20)));

    win = (_toBool(uint8(Bytes.getBytes1(_blob, 40))));

    attackOrDefence = (_toBool(uint8(Bytes.getBytes1(_blob, 41))));

    lossInfantry = (uint256(Bytes.getBytes32(_blob, 42)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (BattleReportData memory _table) {
    (_table.attacker, _table.defender, _table.win, _table.attackOrDefence, _table.lossInfantry) = decodeStatic(
      _staticData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint16 capitalId, uint256 timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint16 capitalId, uint256 timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    address attacker,
    address defender,
    bool win,
    bool attackOrDefence,
    uint256 lossInfantry
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(attacker, defender, win, attackOrDefence, lossInfantry);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    address attacker,
    address defender,
    bool win,
    bool attackOrDefence,
    uint256 lossInfantry
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(attacker, defender, win, attackOrDefence, lossInfantry);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint16 capitalId, uint256 timestamp) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(capitalId));
    _keyTuple[1] = bytes32(uint256(timestamp));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
