// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct CapitalData {
  uint16 tileId;
  bytes32 owner;
  address occupation;
  uint256 infantry;
  uint256 cavalryA;
  uint256 cavalryB;
  uint256 cavalryC;
  uint256 lastTime;
  uint256 pledgedTokenB;
  uint256 pledgedTokenC;
}

library Capital {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "Capital", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746200000000000000000000000000004361706974616c000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x01160a0002201420202020202020000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint16)
  Schema constant _keySchema = Schema.wrap(0x0002010001000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint16, bytes32, address, uint256, uint256, uint256, uint256, uint256, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x01160a00015f611f1f1f1f1f1f1f000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "id";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](10);
    fieldNames[0] = "tileId";
    fieldNames[1] = "owner";
    fieldNames[2] = "occupation";
    fieldNames[3] = "infantry";
    fieldNames[4] = "cavalryA";
    fieldNames[5] = "cavalryB";
    fieldNames[6] = "cavalryC";
    fieldNames[7] = "lastTime";
    fieldNames[8] = "pledgedTokenB";
    fieldNames[9] = "pledgedTokenC";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get tileId.
   */
  function getTileId(uint16 id) internal view returns (uint16 tileId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get tileId.
   */
  function _getTileId(uint16 id) internal view returns (uint16 tileId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set tileId.
   */
  function setTileId(uint16 id, uint16 tileId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((tileId)), _fieldLayout);
  }

  /**
   * @notice Set tileId.
   */
  function _setTileId(uint16 id, uint16 tileId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((tileId)), _fieldLayout);
  }

  /**
   * @notice Get owner.
   */
  function getOwner(uint16 id) internal view returns (bytes32 owner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get owner.
   */
  function _getOwner(uint16 id) internal view returns (bytes32 owner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set owner.
   */
  function setOwner(uint16 id, bytes32 owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((owner)), _fieldLayout);
  }

  /**
   * @notice Set owner.
   */
  function _setOwner(uint16 id, bytes32 owner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((owner)), _fieldLayout);
  }

  /**
   * @notice Get occupation.
   */
  function getOccupation(uint16 id) internal view returns (address occupation) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get occupation.
   */
  function _getOccupation(uint16 id) internal view returns (address occupation) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set occupation.
   */
  function setOccupation(uint16 id, address occupation) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((occupation)), _fieldLayout);
  }

  /**
   * @notice Set occupation.
   */
  function _setOccupation(uint16 id, address occupation) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((occupation)), _fieldLayout);
  }

  /**
   * @notice Get infantry.
   */
  function getInfantry(uint16 id) internal view returns (uint256 infantry) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get infantry.
   */
  function _getInfantry(uint16 id) internal view returns (uint256 infantry) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set infantry.
   */
  function setInfantry(uint16 id, uint256 infantry) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((infantry)), _fieldLayout);
  }

  /**
   * @notice Set infantry.
   */
  function _setInfantry(uint16 id, uint256 infantry) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((infantry)), _fieldLayout);
  }

  /**
   * @notice Get cavalryA.
   */
  function getCavalryA(uint16 id) internal view returns (uint256 cavalryA) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get cavalryA.
   */
  function _getCavalryA(uint16 id) internal view returns (uint256 cavalryA) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set cavalryA.
   */
  function setCavalryA(uint16 id, uint256 cavalryA) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((cavalryA)), _fieldLayout);
  }

  /**
   * @notice Set cavalryA.
   */
  function _setCavalryA(uint16 id, uint256 cavalryA) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((cavalryA)), _fieldLayout);
  }

  /**
   * @notice Get cavalryB.
   */
  function getCavalryB(uint16 id) internal view returns (uint256 cavalryB) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get cavalryB.
   */
  function _getCavalryB(uint16 id) internal view returns (uint256 cavalryB) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set cavalryB.
   */
  function setCavalryB(uint16 id, uint256 cavalryB) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((cavalryB)), _fieldLayout);
  }

  /**
   * @notice Set cavalryB.
   */
  function _setCavalryB(uint16 id, uint256 cavalryB) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((cavalryB)), _fieldLayout);
  }

  /**
   * @notice Get cavalryC.
   */
  function getCavalryC(uint16 id) internal view returns (uint256 cavalryC) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get cavalryC.
   */
  function _getCavalryC(uint16 id) internal view returns (uint256 cavalryC) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set cavalryC.
   */
  function setCavalryC(uint16 id, uint256 cavalryC) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((cavalryC)), _fieldLayout);
  }

  /**
   * @notice Set cavalryC.
   */
  function _setCavalryC(uint16 id, uint256 cavalryC) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((cavalryC)), _fieldLayout);
  }

  /**
   * @notice Get lastTime.
   */
  function getLastTime(uint16 id) internal view returns (uint256 lastTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lastTime.
   */
  function _getLastTime(uint16 id) internal view returns (uint256 lastTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lastTime.
   */
  function setLastTime(uint16 id, uint256 lastTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((lastTime)), _fieldLayout);
  }

  /**
   * @notice Set lastTime.
   */
  function _setLastTime(uint16 id, uint256 lastTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((lastTime)), _fieldLayout);
  }

  /**
   * @notice Get pledgedTokenB.
   */
  function getPledgedTokenB(uint16 id) internal view returns (uint256 pledgedTokenB) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get pledgedTokenB.
   */
  function _getPledgedTokenB(uint16 id) internal view returns (uint256 pledgedTokenB) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set pledgedTokenB.
   */
  function setPledgedTokenB(uint16 id, uint256 pledgedTokenB) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((pledgedTokenB)), _fieldLayout);
  }

  /**
   * @notice Set pledgedTokenB.
   */
  function _setPledgedTokenB(uint16 id, uint256 pledgedTokenB) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((pledgedTokenB)), _fieldLayout);
  }

  /**
   * @notice Get pledgedTokenC.
   */
  function getPledgedTokenC(uint16 id) internal view returns (uint256 pledgedTokenC) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get pledgedTokenC.
   */
  function _getPledgedTokenC(uint16 id) internal view returns (uint256 pledgedTokenC) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set pledgedTokenC.
   */
  function setPledgedTokenC(uint16 id, uint256 pledgedTokenC) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((pledgedTokenC)), _fieldLayout);
  }

  /**
   * @notice Set pledgedTokenC.
   */
  function _setPledgedTokenC(uint16 id, uint256 pledgedTokenC) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((pledgedTokenC)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(uint16 id) internal view returns (CapitalData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint16 id) internal view returns (CapitalData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint16 id,
    uint16 tileId,
    bytes32 owner,
    address occupation,
    uint256 infantry,
    uint256 cavalryA,
    uint256 cavalryB,
    uint256 cavalryC,
    uint256 lastTime,
    uint256 pledgedTokenB,
    uint256 pledgedTokenC
  ) internal {
    bytes memory _staticData = encodeStatic(
      tileId,
      owner,
      occupation,
      infantry,
      cavalryA,
      cavalryB,
      cavalryC,
      lastTime,
      pledgedTokenB,
      pledgedTokenC
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint16 id,
    uint16 tileId,
    bytes32 owner,
    address occupation,
    uint256 infantry,
    uint256 cavalryA,
    uint256 cavalryB,
    uint256 cavalryC,
    uint256 lastTime,
    uint256 pledgedTokenB,
    uint256 pledgedTokenC
  ) internal {
    bytes memory _staticData = encodeStatic(
      tileId,
      owner,
      occupation,
      infantry,
      cavalryA,
      cavalryB,
      cavalryC,
      lastTime,
      pledgedTokenB,
      pledgedTokenC
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint16 id, CapitalData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.tileId,
      _table.owner,
      _table.occupation,
      _table.infantry,
      _table.cavalryA,
      _table.cavalryB,
      _table.cavalryC,
      _table.lastTime,
      _table.pledgedTokenB,
      _table.pledgedTokenC
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint16 id, CapitalData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.tileId,
      _table.owner,
      _table.occupation,
      _table.infantry,
      _table.cavalryA,
      _table.cavalryB,
      _table.cavalryC,
      _table.lastTime,
      _table.pledgedTokenB,
      _table.pledgedTokenC
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint16 tileId,
      bytes32 owner,
      address occupation,
      uint256 infantry,
      uint256 cavalryA,
      uint256 cavalryB,
      uint256 cavalryC,
      uint256 lastTime,
      uint256 pledgedTokenB,
      uint256 pledgedTokenC
    )
  {
    tileId = (uint16(Bytes.getBytes2(_blob, 0)));

    owner = (Bytes.getBytes32(_blob, 2));

    occupation = (address(Bytes.getBytes20(_blob, 34)));

    infantry = (uint256(Bytes.getBytes32(_blob, 54)));

    cavalryA = (uint256(Bytes.getBytes32(_blob, 86)));

    cavalryB = (uint256(Bytes.getBytes32(_blob, 118)));

    cavalryC = (uint256(Bytes.getBytes32(_blob, 150)));

    lastTime = (uint256(Bytes.getBytes32(_blob, 182)));

    pledgedTokenB = (uint256(Bytes.getBytes32(_blob, 214)));

    pledgedTokenC = (uint256(Bytes.getBytes32(_blob, 246)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (CapitalData memory _table) {
    (
      _table.tileId,
      _table.owner,
      _table.occupation,
      _table.infantry,
      _table.cavalryA,
      _table.cavalryB,
      _table.cavalryC,
      _table.lastTime,
      _table.pledgedTokenB,
      _table.pledgedTokenC
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint16 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint16 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint16 tileId,
    bytes32 owner,
    address occupation,
    uint256 infantry,
    uint256 cavalryA,
    uint256 cavalryB,
    uint256 cavalryC,
    uint256 lastTime,
    uint256 pledgedTokenB,
    uint256 pledgedTokenC
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        tileId,
        owner,
        occupation,
        infantry,
        cavalryA,
        cavalryB,
        cavalryC,
        lastTime,
        pledgedTokenB,
        pledgedTokenC
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint16 tileId,
    bytes32 owner,
    address occupation,
    uint256 infantry,
    uint256 cavalryA,
    uint256 cavalryB,
    uint256 cavalryC,
    uint256 lastTime,
    uint256 pledgedTokenB,
    uint256 pledgedTokenC
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      tileId,
      owner,
      occupation,
      infantry,
      cavalryA,
      cavalryB,
      cavalryC,
      lastTime,
      pledgedTokenB,
      pledgedTokenC
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint16 id) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(id));

    return _keyTuple;
  }
}
