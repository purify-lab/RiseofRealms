// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct GlobalStakeData {
  uint256 tokenB;
  uint256 tokenC;
  uint256 lastStakeTime;
  bool isPositive;
  uint256 mintB;
  uint256 burnB;
  uint256 netValue;
  uint256 burnRate;
  uint256 perSecondReward;
}

library GlobalStake {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "GlobalStake", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000476c6f62616c5374616b650000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0101090020202001202020202000000000000000000000000000000000000000);

  // Hex-encoded key schema of ()
  Schema constant _keySchema = Schema.wrap(0x0000000000000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, bool, uint256, uint256, uint256, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x010109001f1f1f601f1f1f1f1f00000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](0);
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](9);
    fieldNames[0] = "tokenB";
    fieldNames[1] = "tokenC";
    fieldNames[2] = "lastStakeTime";
    fieldNames[3] = "isPositive";
    fieldNames[4] = "mintB";
    fieldNames[5] = "burnB";
    fieldNames[6] = "netValue";
    fieldNames[7] = "burnRate";
    fieldNames[8] = "perSecondReward";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get tokenB.
   */
  function getTokenB() internal view returns (uint256 tokenB) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get tokenB.
   */
  function _getTokenB() internal view returns (uint256 tokenB) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set tokenB.
   */
  function setTokenB(uint256 tokenB) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((tokenB)), _fieldLayout);
  }

  /**
   * @notice Set tokenB.
   */
  function _setTokenB(uint256 tokenB) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((tokenB)), _fieldLayout);
  }

  /**
   * @notice Get tokenC.
   */
  function getTokenC() internal view returns (uint256 tokenC) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get tokenC.
   */
  function _getTokenC() internal view returns (uint256 tokenC) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set tokenC.
   */
  function setTokenC(uint256 tokenC) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((tokenC)), _fieldLayout);
  }

  /**
   * @notice Set tokenC.
   */
  function _setTokenC(uint256 tokenC) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((tokenC)), _fieldLayout);
  }

  /**
   * @notice Get lastStakeTime.
   */
  function getLastStakeTime() internal view returns (uint256 lastStakeTime) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lastStakeTime.
   */
  function _getLastStakeTime() internal view returns (uint256 lastStakeTime) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lastStakeTime.
   */
  function setLastStakeTime(uint256 lastStakeTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((lastStakeTime)), _fieldLayout);
  }

  /**
   * @notice Set lastStakeTime.
   */
  function _setLastStakeTime(uint256 lastStakeTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((lastStakeTime)), _fieldLayout);
  }

  /**
   * @notice Get isPositive.
   */
  function getIsPositive() internal view returns (bool isPositive) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get isPositive.
   */
  function _getIsPositive() internal view returns (bool isPositive) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set isPositive.
   */
  function setIsPositive(bool isPositive) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((isPositive)), _fieldLayout);
  }

  /**
   * @notice Set isPositive.
   */
  function _setIsPositive(bool isPositive) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((isPositive)), _fieldLayout);
  }

  /**
   * @notice Get mintB.
   */
  function getMintB() internal view returns (uint256 mintB) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get mintB.
   */
  function _getMintB() internal view returns (uint256 mintB) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set mintB.
   */
  function setMintB(uint256 mintB) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((mintB)), _fieldLayout);
  }

  /**
   * @notice Set mintB.
   */
  function _setMintB(uint256 mintB) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((mintB)), _fieldLayout);
  }

  /**
   * @notice Get burnB.
   */
  function getBurnB() internal view returns (uint256 burnB) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get burnB.
   */
  function _getBurnB() internal view returns (uint256 burnB) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set burnB.
   */
  function setBurnB(uint256 burnB) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((burnB)), _fieldLayout);
  }

  /**
   * @notice Set burnB.
   */
  function _setBurnB(uint256 burnB) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((burnB)), _fieldLayout);
  }

  /**
   * @notice Get netValue.
   */
  function getNetValue() internal view returns (uint256 netValue) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get netValue.
   */
  function _getNetValue() internal view returns (uint256 netValue) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set netValue.
   */
  function setNetValue(uint256 netValue) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((netValue)), _fieldLayout);
  }

  /**
   * @notice Set netValue.
   */
  function _setNetValue(uint256 netValue) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((netValue)), _fieldLayout);
  }

  /**
   * @notice Get burnRate.
   */
  function getBurnRate() internal view returns (uint256 burnRate) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get burnRate.
   */
  function _getBurnRate() internal view returns (uint256 burnRate) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set burnRate.
   */
  function setBurnRate(uint256 burnRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((burnRate)), _fieldLayout);
  }

  /**
   * @notice Set burnRate.
   */
  function _setBurnRate(uint256 burnRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((burnRate)), _fieldLayout);
  }

  /**
   * @notice Get perSecondReward.
   */
  function getPerSecondReward() internal view returns (uint256 perSecondReward) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get perSecondReward.
   */
  function _getPerSecondReward() internal view returns (uint256 perSecondReward) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set perSecondReward.
   */
  function setPerSecondReward(uint256 perSecondReward) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((perSecondReward)), _fieldLayout);
  }

  /**
   * @notice Set perSecondReward.
   */
  function _setPerSecondReward(uint256 perSecondReward) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((perSecondReward)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get() internal view returns (GlobalStakeData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get() internal view returns (GlobalStakeData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 tokenB,
    uint256 tokenC,
    uint256 lastStakeTime,
    bool isPositive,
    uint256 mintB,
    uint256 burnB,
    uint256 netValue,
    uint256 burnRate,
    uint256 perSecondReward
  ) internal {
    bytes memory _staticData = encodeStatic(
      tokenB,
      tokenC,
      lastStakeTime,
      isPositive,
      mintB,
      burnB,
      netValue,
      burnRate,
      perSecondReward
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 tokenB,
    uint256 tokenC,
    uint256 lastStakeTime,
    bool isPositive,
    uint256 mintB,
    uint256 burnB,
    uint256 netValue,
    uint256 burnRate,
    uint256 perSecondReward
  ) internal {
    bytes memory _staticData = encodeStatic(
      tokenB,
      tokenC,
      lastStakeTime,
      isPositive,
      mintB,
      burnB,
      netValue,
      burnRate,
      perSecondReward
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(GlobalStakeData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.tokenB,
      _table.tokenC,
      _table.lastStakeTime,
      _table.isPositive,
      _table.mintB,
      _table.burnB,
      _table.netValue,
      _table.burnRate,
      _table.perSecondReward
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(GlobalStakeData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.tokenB,
      _table.tokenC,
      _table.lastStakeTime,
      _table.isPositive,
      _table.mintB,
      _table.burnB,
      _table.netValue,
      _table.burnRate,
      _table.perSecondReward
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 tokenB,
      uint256 tokenC,
      uint256 lastStakeTime,
      bool isPositive,
      uint256 mintB,
      uint256 burnB,
      uint256 netValue,
      uint256 burnRate,
      uint256 perSecondReward
    )
  {
    tokenB = (uint256(Bytes.getBytes32(_blob, 0)));

    tokenC = (uint256(Bytes.getBytes32(_blob, 32)));

    lastStakeTime = (uint256(Bytes.getBytes32(_blob, 64)));

    isPositive = (_toBool(uint8(Bytes.getBytes1(_blob, 96))));

    mintB = (uint256(Bytes.getBytes32(_blob, 97)));

    burnB = (uint256(Bytes.getBytes32(_blob, 129)));

    netValue = (uint256(Bytes.getBytes32(_blob, 161)));

    burnRate = (uint256(Bytes.getBytes32(_blob, 193)));

    perSecondReward = (uint256(Bytes.getBytes32(_blob, 225)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (GlobalStakeData memory _table) {
    (
      _table.tokenB,
      _table.tokenC,
      _table.lastStakeTime,
      _table.isPositive,
      _table.mintB,
      _table.burnB,
      _table.netValue,
      _table.burnRate,
      _table.perSecondReward
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 tokenB,
    uint256 tokenC,
    uint256 lastStakeTime,
    bool isPositive,
    uint256 mintB,
    uint256 burnB,
    uint256 netValue,
    uint256 burnRate,
    uint256 perSecondReward
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(tokenB, tokenC, lastStakeTime, isPositive, mintB, burnB, netValue, burnRate, perSecondReward);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 tokenB,
    uint256 tokenC,
    uint256 lastStakeTime,
    bool isPositive,
    uint256 mintB,
    uint256 burnB,
    uint256 netValue,
    uint256 burnRate,
    uint256 perSecondReward
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      tokenB,
      tokenC,
      lastStakeTime,
      isPositive,
      mintB,
      burnB,
      netValue,
      burnRate,
      perSecondReward
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple() internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
