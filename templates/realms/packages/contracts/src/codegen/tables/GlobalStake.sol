// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct GlobalStakeData {
  uint256 stakeTokenB;
  uint256 stakeTokenC;
  uint256 lastStakeTime;
  uint256 valueB;
  uint256 valueC;
}

library GlobalStake {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "", name: "GlobalStake", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74620000000000000000000000000000476c6f62616c5374616b650000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00a0050020202020200000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of ()
  Schema constant _keySchema = Schema.wrap(0x0000000000000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x00a005001f1f1f1f1f0000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](0);
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "stakeTokenB";
    fieldNames[1] = "stakeTokenC";
    fieldNames[2] = "lastStakeTime";
    fieldNames[3] = "valueB";
    fieldNames[4] = "valueC";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get stakeTokenB.
   */
  function getStakeTokenB() internal view returns (uint256 stakeTokenB) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get stakeTokenB.
   */
  function _getStakeTokenB() internal view returns (uint256 stakeTokenB) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set stakeTokenB.
   */
  function setStakeTokenB(uint256 stakeTokenB) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((stakeTokenB)), _fieldLayout);
  }

  /**
   * @notice Set stakeTokenB.
   */
  function _setStakeTokenB(uint256 stakeTokenB) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((stakeTokenB)), _fieldLayout);
  }

  /**
   * @notice Get stakeTokenC.
   */
  function getStakeTokenC() internal view returns (uint256 stakeTokenC) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get stakeTokenC.
   */
  function _getStakeTokenC() internal view returns (uint256 stakeTokenC) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set stakeTokenC.
   */
  function setStakeTokenC(uint256 stakeTokenC) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((stakeTokenC)), _fieldLayout);
  }

  /**
   * @notice Set stakeTokenC.
   */
  function _setStakeTokenC(uint256 stakeTokenC) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((stakeTokenC)), _fieldLayout);
  }

  /**
   * @notice Get lastStakeTime.
   */
  function getLastStakeTime() internal view returns (uint256 lastStakeTime) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lastStakeTime.
   */
  function _getLastStakeTime() internal view returns (uint256 lastStakeTime) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lastStakeTime.
   */
  function setLastStakeTime(uint256 lastStakeTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((lastStakeTime)), _fieldLayout);
  }

  /**
   * @notice Set lastStakeTime.
   */
  function _setLastStakeTime(uint256 lastStakeTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((lastStakeTime)), _fieldLayout);
  }

  /**
   * @notice Get valueB.
   */
  function getValueB() internal view returns (uint256 valueB) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get valueB.
   */
  function _getValueB() internal view returns (uint256 valueB) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set valueB.
   */
  function setValueB(uint256 valueB) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((valueB)), _fieldLayout);
  }

  /**
   * @notice Set valueB.
   */
  function _setValueB(uint256 valueB) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((valueB)), _fieldLayout);
  }

  /**
   * @notice Get valueC.
   */
  function getValueC() internal view returns (uint256 valueC) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get valueC.
   */
  function _getValueC() internal view returns (uint256 valueC) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set valueC.
   */
  function setValueC(uint256 valueC) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((valueC)), _fieldLayout);
  }

  /**
   * @notice Set valueC.
   */
  function _setValueC(uint256 valueC) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((valueC)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get() internal view returns (GlobalStakeData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get() internal view returns (GlobalStakeData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 stakeTokenB,
    uint256 stakeTokenC,
    uint256 lastStakeTime,
    uint256 valueB,
    uint256 valueC
  ) internal {
    bytes memory _staticData = encodeStatic(stakeTokenB, stakeTokenC, lastStakeTime, valueB, valueC);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 stakeTokenB,
    uint256 stakeTokenC,
    uint256 lastStakeTime,
    uint256 valueB,
    uint256 valueC
  ) internal {
    bytes memory _staticData = encodeStatic(stakeTokenB, stakeTokenC, lastStakeTime, valueB, valueC);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(GlobalStakeData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.stakeTokenB,
      _table.stakeTokenC,
      _table.lastStakeTime,
      _table.valueB,
      _table.valueC
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(GlobalStakeData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.stakeTokenB,
      _table.stakeTokenC,
      _table.lastStakeTime,
      _table.valueB,
      _table.valueC
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (uint256 stakeTokenB, uint256 stakeTokenC, uint256 lastStakeTime, uint256 valueB, uint256 valueC)
  {
    stakeTokenB = (uint256(Bytes.getBytes32(_blob, 0)));

    stakeTokenC = (uint256(Bytes.getBytes32(_blob, 32)));

    lastStakeTime = (uint256(Bytes.getBytes32(_blob, 64)));

    valueB = (uint256(Bytes.getBytes32(_blob, 96)));

    valueC = (uint256(Bytes.getBytes32(_blob, 128)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (GlobalStakeData memory _table) {
    (_table.stakeTokenB, _table.stakeTokenC, _table.lastStakeTime, _table.valueB, _table.valueC) = decodeStatic(
      _staticData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 stakeTokenB,
    uint256 stakeTokenC,
    uint256 lastStakeTime,
    uint256 valueB,
    uint256 valueC
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(stakeTokenB, stakeTokenC, lastStakeTime, valueB, valueC);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 stakeTokenB,
    uint256 stakeTokenC,
    uint256 lastStakeTime,
    uint256 valueB,
    uint256 valueC
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(stakeTokenB, stakeTokenC, lastStakeTime, valueB, valueC);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple() internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    return _keyTuple;
  }
}
